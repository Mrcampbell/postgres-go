// Code generated by gnorm, DO NOT EDIT!

package enum

import (
	"database/sql/driver"

	"github.com/gnormal/postgres-go/generated"
	"github.com/pkg/errors"
)

// BookType is the 'book_type' enum type from schema 'Public'.
type BookType uint16

const (
	// UnknownBookType defines an invalid BookType.
	UnknownBookType BookType = 0
	FictionBookType BookType = 1

	NonfictionBookType BookType = 2
)

// String returns the string value of the BookType.
func (e BookType) String() string {
	switch e {
	case FictionBookType:
		return "FICTION"
	case NonfictionBookType:
		return "NONFICTION"
	default:
		return "UnknownBookType"
	}
}

// MarshalText marshals BookType into text.
func (e BookType) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText unmarshals BookType from text.
func (e *BookType) UnmarshalText(text []byte) error {
	val, err := ParseBookType(string(text))
	if err != nil {
		return err
	}
	*e = val
	return nil
}

// ParseBookType converts s into a BookType if it is a valid
// stringified value of BookType.
func ParseBookType(s string) (BookType, error) {
	switch s {
	case "FICTION":
		return FictionBookType, nil
	case "NONFICTION":
		return NonfictionBookType, nil
	default:
		return UnknownBookType, errors.New("invalid BookType")
	}
}

// Value satisfies the sql/driver.Valuer interface for BookType.
func (e BookType) Value() (driver.Value, error) {
	return e.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for BookType.
func (e *BookType) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid BookType")
	}

	return e.UnmarshalText(buf)
}

// BookTypeField is a component that returns a generated.Where that contains a
// comparison based on its field and a strongly typed value.
type BookTypeField string

// Equals returns a generated.WhereClause for this field.
func (f BookTypeField) Equals(v BookType) generated.Where {
	return generated.Where{
		Field: string(f),
		Comp:  generated.CompEqual,
		Value: v,
	}
}

// GreaterThan returns a generated.Where for this field.
func (f BookTypeField) GreaterThan(v BookType) generated.Where {
	return generated.Where{
		Field: string(f),
		Comp:  generated.CompGreater,
		Value: v,
	}
}

// LessThan returns a generated.Where for this field.
func (f BookTypeField) LessThan(v BookType) generated.Where {
	return generated.Where{
		Field: string(f),
		Comp:  generated.CompEqual,
		Value: v,
	}
}

// GreaterOrEqual returns a generated.Where for this field.
func (f BookTypeField) GreaterOrEqual(v BookType) generated.Where {
	return generated.Where{
		Field: string(f),
		Comp:  generated.CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a generated.Where for this field.
func (f BookTypeField) LessOrEqual(v BookType) generated.Where {
	return generated.Where{
		Field: string(f),
		Comp:  generated.CompLTE,
		Value: v,
	}
}

// NotEqual returns a generated.Where for this field.
func (f BookTypeField) NotEqual(v BookType) generated.Where {
	return generated.Where{
		Field: string(f),
		Comp:  generated.CompNE,
		Value: v,
	}
}

// In returns a generated.Where for this field.
func (f BookTypeField) In(vals []BookType) generated.InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return generated.InClause{
		Field: string(f),
		Vals:  values,
	}
}
