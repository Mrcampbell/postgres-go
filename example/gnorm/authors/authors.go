// Code generated by gnorm, DO NOT EDIT!

package authors

import (
	"github.com/pkg/errors"
	uuid "github.com/satori/go.uuid"
	"gnorm.org/postgres-go/example/gnorm"
)

// Row represents a row from 'authors'.
type Row struct {
	ID   uuid.UUID // id (PK)
	Name string    // name
}

// Field values for every column in Authors.
var (
	IDCol   gnorm.UuidUUIDField = "id"
	NameCol gnorm.StringField   = "name"
)

// Query retrieves rows from 'authors' as a slice of Row.
func Query(db gnorm.DB, where gnorm.WhereClause) ([]*Row, error) {
	const origsqlstr = `SELECT 
		id, name
		FROM public.authors WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") "

	var vals []*Row
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		r := Row{}
		err := q.Scan(&r.ID, &r.Name)
		if err != nil {
			return nil, err
		}
		vals = append(vals, &r)
	}
	return vals, nil
}

// One retrieve one row from 'authors'.
func One(db gnorm.DB, where gnorm.WhereClause) ([]*Row, error) {
	const origsqlstr = `SELECT 
		id, name
		FROM public.authors WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") "

	var vals []*Row
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		r := Row{}
		err := q.Scan(&r.ID, &r.Name)
		if err != nil {
			return nil, err
		}
		vals = append(vals, &r)
	}
	return vals, nil
}

// Insert inserts the row into the database.
func Insert(db gnorm.DB, r *Row) error {
	const sqlstr = `INSERT INTO authors (
			id, name
		) VALUES (
			$1, $2
		)`
	_, err := db.Exec(sqlstr, r.ID, r.Name)
	return errors.Wrap(err, "insert Authors")
}

// Update updates the Row in the database.
func Update(db gnorm.DB, r *Row) error {
	const sqlstr = `UPDATE authors SET (
			name		
		) = ( 
			$1
		) WHERE
			id = $2
		`
	_, err := db.Exec(sqlstr, r.Name, r.ID)
	return errors.Wrap(err, "update Authors:")
}

// Upsert performs an upsert for Authors.
//
// NOTE: PostgreSQL 9.5+ only
func Upsert(db gnorm.DB, r *Row) error {
	const sqlstr = `INSERT INTO authors (
		name, id
	) VALUES (
		$1, $2
	) ON CONFLICT (id) DO UPDATE SET (
		name
	) = ( 
		$1
	)`

	_, err := db.Exec(sqlstr, r.Name, r.ID)
	return errors.Wrap(err, "upsert Authors")
}

// Delete deletes the Row from the database.
func Delete(
	db gnorm.DB,
	id uuid.UUID,
) error {
	const sqlstr = `DELETE FROM authors WHERE id = $1`

	_, err := db.Exec(
		sqlstr,
		id,
	)
	return errors.Wrap(err, "delete Authors")
}
